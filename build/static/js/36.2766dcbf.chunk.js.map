{"version":3,"sources":["assets/images/job-posted-bg.jpg","redux/quotes/actions.ts","pages/builderJobDasboard/components/quoteJobs/quoteJobCancel.tsx"],"names":["quoteByJobId","data","a","setLoading","url","isUserType","storageService","getItem","console","log","tradieId","length","Urls","quote","jobId","sortBy","NetworkOps","get","response","status_code","success","result","setShowToast","message","addQuote","postToJson","addItem","deleteItem","putToJson","updateItem","getAcceptDeclineTradie","acceptDeclineRequest","msg","closeQuoteJob","job","withRouter","props","location","useLocation","urlParams","URLSearchParams","search","cancelJob","history","push","className","src","templateImage","alt","loading","onClick"],"mappings":"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","file":"static/js/36.2766dcbf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/job-posted-bg.08c9bb16.jpg\";","import NetworkOps, { FetchResponse } from '../../network/NetworkOps';\nimport Urls from '../../network/Urls';\nimport * as actionTypes from './constants';\nimport { setShowToast, setLoading } from '../common/actions';\nimport storageService from '../../utils/storageService';\n\n\nexport const quoteByJobId = async (data: any) => {\n    setLoading(true);\n    let url = '';\n    let isUserType = storageService.getItem('userType') === 1 ? true : false;\n    console.log({data, isUserType})\n    if (isUserType) {\n        url = `${Urls.quote}quoteByJobId?jobId=${data.jobId}&tradieId=${data.tradieId}`;\n    } else {\n        \n        if (data.tradieId?.length) {\n            url = `${Urls.quote}quoteByJobId?jobId=${data.jobId}&tradieId=${data.tradieId}`;\n        } else {\n            url = `${Urls.quote}quoteByJobId?jobId=${data.jobId}&sort=${data.sortBy}`\n        }\n    }\n    const response: FetchResponse = await NetworkOps.get(url);\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true, data: response?.result };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const addQuote = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.postToJson(`${Urls.quote}addQuote`, data);\n    setLoading(false);\n    if (response.status_code === 200) {\n        return { success: true };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const addItem = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.postToJson(`${Urls.quote}addItem`, data);\n    setLoading(false);\n    if (response.status_code === 200) {\n        setShowToast(true, response.message);\n        return { success: true, data: response?.result };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const deleteItem = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.putToJson(`${Urls.quote}deleteItem`, data);\n    setLoading(false);\n    if (response.status_code === 200) {\n        setShowToast(true, response.message);\n        return { success: true, data: response?.result };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const updateItem = async (data: any) => {\n    setLoading(true);\n    const response: FetchResponse = await NetworkOps.putToJson(`${Urls.quote}updateItem`, data);\n    setLoading(false);\n    if (response.status_code === 200) {\n        setShowToast(true, response.message);\n        return { success: true };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\nexport const getAcceptDeclineTradie = async (data: any) => {\n    const response: FetchResponse = await NetworkOps.putToJson(Urls.acceptDeclineRequest, data);\n    if (response.status_code === 200) {\n        return { success: true, data: response?.result, msg: response.message };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\n\nexport const closeQuoteJob = async (data: any) => {\n    const response: FetchResponse = await NetworkOps.putToJson(`${Urls.job}closeQuoteJob`, data);\n    if (response.status_code === 200) {\n        setShowToast(true, response.message);\n        return { success: true, data: response?.result };\n    }\n    setShowToast(true, response.message);\n    return { success: false };\n}\n\n\n//PUT /job/closeQuoteJob","import React from 'react';\nimport templateImage from '../../../.././assets/images/job-posted-bg.jpg';\nimport { withRouter, useLocation } from 'react-router-dom';\nimport { closeQuoteJob } from '../../../../redux/quotes/actions'\n\n\nconst QuoteJobCancel = (props: any) => {\n  let location = useLocation();\n  let urlParams = new URLSearchParams(location.search);\n  let jobId = urlParams.get('jobId');\n  let tradieId = urlParams.get('tradieId');\n\n  const cancelJob = async () => {\n    let data = { jobId, tradieId };\n    let response = await closeQuoteJob(data);\n    if (response.success) {\n      props.history.push('/jobs?active=past');\n    }\n  }\n\n  return (\n    <div className=\"img_text_wrap\">\n      <figure className=\"full_image\">\n        <img src={templateImage} alt=\"template-item\" loading=\"eager\" />\n        <div className=\"short_info\">\n          <div className=\"content\">\n            <h1 className=\"title\">\n              {'Job Cancelled'}\n            </h1>\n            <span className=\"show_label\">\n              {'Your job for quoting has just being cancelled. Do you want to close the job or keep it open for new bidders?'}\n            </span>\n\n            <div className=\"form_field\">\n              <button\n                onClick={cancelJob}\n                className=\"fill_btn full_btn btn-effect\">\n                {`Close the job`}\n              </button>\n            </div>\n\n            <div className=\"form_field\">\n              <button\n                onClick={() => props.history.push(`/post-new-job?jobId=${jobId}`)}\n                className=\"fill_grey_btn full_btn btn-effect\">\n                {'Keep the job open'}\n              </button>\n            </div>\n\n          </div>\n        </div>\n      </figure>\n    </div>\n  )\n}\n\nexport default withRouter(QuoteJobCancel);"],"sourceRoot":""}